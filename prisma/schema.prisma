// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Book {
  id              Int      @id @default(autoincrement())
  title           String
  author          String
  category        String?
  isbn            String?  @unique
  publishedYear   Int?
  totalCopies     Int
  availableCopies Int
  coverImageUrl   String?
  description     String?
  lendable        Boolean  @default(true)
  source          String   @default("library")
  ownerId         Int?
  owner           User?    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  status          BookStatus @default(AVAILABLE)
  borrowerId      Int?
  borrower        User?      @relation("Borrower", fields: [borrowerId], references: [id])
  dueDate         DateTime?
  requests        BorrowRequest[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String
  phoneNumber  String?
  profileImage String?
  role         UserRole @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  books        Book[]
  borrowed     Book[]          @relation("Borrower")
  borrowRequests BorrowRequest[]
}

enum UserRole {
  USER
  ADMIN
}

enum BookStatus {
  AVAILABLE
  PENDING
  RESERVED
  BORROWED
  UNAVAILABLE
}

model BorrowRequest {
  id          Int                  @id @default(autoincrement())
  bookId      Int
  requesterId Int
  status      BorrowRequestStatus  @default(PENDING)
  message     String?
  whatsappUrl String?
  ownerMessage   String?
  ownerDecisionAt DateTime?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  notifications BorrowNotification[]

  book      Book @relation(fields: [bookId], references: [id])
  requester User @relation(fields: [requesterId], references: [id])
}

enum BorrowRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  RETURNED
}

model BorrowNotification {
  id        Int               @id @default(autoincrement())
  requestId Int
  type      NotificationType
  message   String?
  createdAt DateTime          @default(now())

  request BorrowRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  APPROVED
  REJECTED
  CANCELLED
  EXTENDED
  RETURNED
}
